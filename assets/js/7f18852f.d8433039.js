"use strict";(self.webpackChunkjodichris_com=self.webpackChunkjodichris_com||[]).push([[254],{2398:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"py-cheatsheet","title":"Python Cheatsheet","description":"Published on November 30, 2020","source":"@site/docs/py-cheatsheet.md","sourceDirName":".","slug":"/py-cheatsheet","permalink":"/docs/py-cheatsheet","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Python Cheatsheet"},"sidebar":"docs","previous":{"title":"Docker Cheatsheet","permalink":"/docs/docker-cheatsheet"},"next":{"title":"Linux Command Cheatsheet","permalink":"/docs/linux-cmd"}}');var a=i(4848),s=i(8453);const r={title:"Python Cheatsheet"},l="Table of Content",d={},o=[{value:"Main",id:"main",level:2},{value:"Basic and necessary commands needed to execute a well-defined python code at the command line.",id:"basic-and-necessary-commands-needed-to-execute-a-well-defined-python-code-at-the-command-line",level:2},{value:"Opening a python shell.",id:"opening-a-python-shell",level:3},{value:"Installing a package",id:"installing-a-package",level:3},{value:"Running a python script",id:"running-a-python-script",level:3},{value:"Calculating the time of execution",id:"calculating-the-time-of-execution",level:3},{value:"Importing a py script",id:"importing-a-py-script",level:3},{value:"Getting started with the language",id:"getting-started-with-the-language",level:2},{value:"Basic I/O",id:"basic-io",level:3},{value:"Variables and Constants",id:"variables-and-constants",level:3},{value:"Conditional Statements",id:"conditional-statements",level:3},{value:"Iterative statements",id:"iterative-statements",level:3},{value:"String formatting",id:"string-formatting",level:3},{value:"Function",id:"function",level:2},{value:"Function Call",id:"function-call",level:3},{value:"Function as Object",id:"function-as-object",level:3},{value:"Nested Function",id:"nested-function",level:3},{value:"Lambda",id:"lambda",level:2},{value:"Data Structures",id:"data-structures",level:2},{value:"Lists",id:"lists",level:3},{value:"Dictionaries",id:"dictionaries",level:3},{value:"Tuple",id:"tuple",level:3},{value:"Changing Tuple Values",id:"changing-tuple-values",level:4},{value:"Creating tuple with one item",id:"creating-tuple-with-one-item",level:4},{value:"Deleting a tuple",id:"deleting-a-tuple",level:4},{value:"Pandas",id:"pandas",level:2},{value:"Data Structures in Pandas",id:"data-structures-in-pandas",level:3},{value:"NLTK",id:"nltk",level:2},{value:"Errors and Exceptions",id:"errors-and-exceptions",level:2},{value:"Exceptions",id:"exceptions",level:3},{value:"Python Snippets",id:"python-snippets",level:2},{value:"Anagrams",id:"anagrams",level:3},{value:"Memory",id:"memory",level:3},{value:"Print a string N times",id:"print-a-string-n-times",level:3},{value:"Chunk",id:"chunk",level:3},{value:"Get vowels",id:"get-vowels",level:3},{value:"Length of Last Word in a string",id:"length-of-last-word-in-a-string",level:3},{value:"Valid Palindrome",id:"valid-palindrome",level:3},{value:"Check Lowercase",id:"check-lowercase",level:3},{value:"Count Negatives in a sorted Matrix",id:"count-negatives-in-a-sorted-matrix",level:3},{value:"Write to file",id:"write-to-file",level:3},{value:"Median of given array",id:"median-of-given-array",level:3},{value:"Even or Odd",id:"even-or-odd",level:3},{value:"Palindrome",id:"palindrome",level:3},{value:"Further reading",id:"further-reading",level:2}];function c(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Published on November 30, 2020"}),"\n",(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"table-of-content",children:"Table of Content"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#main",children:"Main"})}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#basic-and-necessary-commands-needed-to-execute-a-well-defined-python-code-at-the-command-line",children:"Basic and necessary commands needed to execute a well-defined python code at the command line."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#opening-a-python-shell",children:"Opening a python shell."})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#installing-a-package",children:"Installing a package"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#running-a-python-script",children:"Running a python script"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#calculating-the-time-of-execution",children:"Calculating the time of execution"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#importing-a-py-script",children:"Importing a py script"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#getting-started-with-the-language",children:"Getting started with the language"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#basic-io",children:"Basic I/O"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#variables-and-constants",children:"Variables and Constants"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#conditional-statements",children:"Conditional Statements"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#iterative-statements",children:"Iterative statements"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#string-formatting",children:"String formatting"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#function",children:"Function"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#function-call",children:"Function Call"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#function-as-object",children:"Function as Object"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#nested-function",children:"Nested Function"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#lambda",children:"Lambda"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#data-structures",children:"Data Structures"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#lists",children:"Lists"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#dictionaries",children:"Dictionaries"})}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#tuple",children:"Tuple"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#changing-tuple-values",children:"Changing Tuple Values"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#creating-tuple-with-one-item",children:"Creating tuple with one item"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#deleting-a-tuple",children:"Deleting a tuple"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#pandas",children:"Pandas"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#data-structures-in-pandas",children:"Data Structures in Pandas"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#nltk",children:"NLTK"})}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#errors-and-exceptions",children:"Errors and Exceptions"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#exceptions",children:"Exceptions"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#python-snippets",children:"Python Snippets"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#anagrams",children:"Anagrams"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#memory",children:"Memory"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#print-a-string-n-times",children:"Print a string N times"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#chunk",children:"Chunk"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#get-vowels",children:"Get vowels"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#length-of-last-word-in-a-string",children:"Length of Last Word in a string"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#valid-palindrome",children:"Valid Palindrome"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#check-lowercase",children:"Check Lowercase"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#count-negatives-in-a-sorted-matrix",children:"Count Negatives in a sorted Matrix"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#write-to-file",children:"Write to file"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#median-of-given-array",children:"Median of given array"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#even-or-odd",children:"Even or Odd"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#palindrome",children:"Palindrome"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"main",children:"Main"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"if __name__ == '__main__':    # If file is not imported, this will be executed\n    main()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"basic-and-necessary-commands-needed-to-execute-a-well-defined-python-code-at-the-command-line",children:"Basic and necessary commands needed to execute a well-defined python code at the command line."}),"\n",(0,a.jsx)(n.h3,{id:"opening-a-python-shell",children:"Opening a python shell."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"$ python3\n"})}),"\n",(0,a.jsx)(n.h3,{id:"installing-a-package",children:"Installing a package"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"$ pip3 install <package-name>\n"})}),"\n",(0,a.jsx)(n.h3,{id:"running-a-python-script",children:"Running a python script"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"$ python3 <filename>.py\n"})}),"\n",(0,a.jsx)(n.h3,{id:"calculating-the-time-of-execution",children:"Calculating the time of execution"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"$ time python3 <filename>.py\n"})}),"\n",(0,a.jsx)(n.h3,{id:"importing-a-py-script",children:"Importing a py script"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import <filename>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"getting-started-with-the-language",children:"Getting started with the language"}),"\n",(0,a.jsx)(n.h3,{id:"basic-io",children:"Basic I/O"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Input"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'input("Input: ")\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Output\nPython automatically points the cursor to a new line.\nWe need not specify explicitly."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'print("Output")\n'})}),"\n",(0,a.jsx)(n.h3,{id:"variables-and-constants",children:"Variables and Constants"}),"\n",(0,a.jsx)(n.p,{children:"In python, we need not specify the datatype of a variable.\nThe interpreter interprets the value and assigns a suitabe datatype for that."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'number = 0\norg = "GitHub"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"conditional-statements",children:"Conditional Statements"}),"\n",(0,a.jsxs)(n.p,{children:["In python, we do not write a block of code in a pair of paranthesis.\nWe write it after ",(0,a.jsx)(n.code,{children:":"})," followed by an indentation in the next line."]}),"\n",(0,a.jsxs)(n.p,{children:["The conditional statements include ",(0,a.jsx)(n.code,{children:"if"}),", ",(0,a.jsx)(n.code,{children:"if-else"}),", ",(0,a.jsx)(n.code,{children:"nested if"})," and so on..."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'x,y = 0,1\nif x < y:\n  print("x is less than y")\nelse:\n  print("x is not less than y")\n'})}),"\n",(0,a.jsx)(n.h3,{id:"iterative-statements",children:"Iterative statements"}),"\n",(0,a.jsx)(n.p,{children:"As other programming languages, we have"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"for loop"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"for i in range(5):\n  print(i)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"range"})," function starts off with 0 till the number(excluded)."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"while loop"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'i=0\nwhile(i < 10):\n  print("{} is less than 10".format(i))\n  i += 1\n'})}),"\n",(0,a.jsx)(n.h3,{id:"string-formatting",children:"String formatting"}),"\n",(0,a.jsx)(n.p,{children:"There are a few ways to format a string in Python."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Using the ",(0,a.jsx)(n.code,{children:"%"})," operator\nStrings can be formatted using the % operator:"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:">>> foo = 'world'\n>>> 'Hello %s' % foo\n'Hello world'\n"})}),"\n",(0,a.jsx)(n.p,{children:"To subsitute multiple instances, wrap the right hand side in a Tuple:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:">>> foo = 'James'\n>>> bar = 'Nancy'\n>>> 'Hi, my name is %s and this is %s' % (foo, bar)\n'Hi, my name is James and this is Nancy'\n"})}),"\n",(0,a.jsx)(n.p,{children:"You can also do variable subsitutions with a dictionary:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'>>> dict = { "name": "Mike", "country": "Canada" }\n>>> \'I am %(name)s and I am from %(country)s\' % dict\n\'I am Mike and I am from Canada\'\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:".format()"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Introduced in Python 3, but is available in Python 2.7+"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:">>> 'Hello {}'.format('world')\n'Hello world'\n"})}),"\n",(0,a.jsx)(n.p,{children:"Similar to the above, subsitutions can be referred by name:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:">>> 'Hi {name}, your total is ${total}'.format(name='Bob', total=5.50)\n'Hi Bob, your total is $5.5'\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"f-Strings"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Available in Python 3.6+. Works similar to the above, but is more powerful as arbitrary Python expressions can be embedded:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:">>> a = 5\n>>> b = 10\n>>> f'Five plus ten is {a + b} and not {2 * (a + b)}.'\n'Five plus ten is 15 and not 30.'\n"})}),"\n",(0,a.jsx)(n.h2,{id:"function",children:"Function"}),"\n",(0,a.jsxs)(n.p,{children:["Function is a block of code which runs when it is called.",(0,a.jsx)(n.br,{}),"\n","Functions are declared using the ",(0,a.jsx)(n.code,{children:"def"})," keyword. Function name must be a valid identifier.",(0,a.jsx)(n.br,{}),"\n","Function arguments can be literal values, variables (valid identifiers), and expressions."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def sum(a, b) :\n\treturn a + b\n\ndef subtract(a, b) :\n\treturn a - b\n\ndef getPerson(name, age) :\n\tperson = { "name": name, "age": age }\n\treturn person\n'})}),"\n",(0,a.jsx)(n.h3,{id:"function-call",children:"Function Call"}),"\n",(0,a.jsx)(n.p,{children:"Functions can be called by passing the arguments according to the declaration."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'a = 20\nb = 50\nc = sum(a, b)\nd = sum(b, 50)\ne = subtract(b, a)\np = getPerson("Joe", 25)\n\n# OUTPUT:\nprint( "Sum - {} plus {}: {}" . format( a, b, c ) ) # Sum - 20 plus 50: 70\nprint( "Sum - {} plus 50: {}" . format( b, d ) ) # Sum - 50 plus 50: 100\nprint( "Subtraction - {} minus {}: {}" . format( b, a, e ) ) # Subtraction - 50 minus 20: 30\nprint( "Person - {}" . format( p ) ) # Person - {\'name\': \'Joe\', \'age\': 75}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"function-as-object",children:"Function as Object"}),"\n",(0,a.jsx)(n.p,{children:"All data in a Python is represented by objects. There\u2019s nothing particularly special about functions. They\u2019re also just objects."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def yell(text):                   # Define function yell\n\treturn text.upper() + '!'\n\n\n>>> bark = yell                   # Declare an object \"bark\" that contains the function \"yell\"\n>>> bark('woof')                  # You could now execute the \"yell\" function object by calling bark\n'WOOF!'\n"})}),"\n",(0,a.jsx)(n.h3,{id:"nested-function",children:"Nested Function"}),"\n",(0,a.jsx)(n.p,{children:"Functions can be defined inside other functions. These are often called nested functions or inner functions."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def speak(text):                          # Define function speak\n\tdef wisper(t):                    # Function wisper does not exist outside speak\n\t\treturn t.lower() + '...'\n\treturn wisper(text)\n\n\n>>> speak('Hello, World')\n'hello, world...'\n"})}),"\n",(0,a.jsx)(n.h2,{id:"lambda",children:"Lambda"}),"\n",(0,a.jsx)(n.p,{children:"The lambda keyword in Python provides a shortcut for declaring small anonymous functions."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:">>> add = lambda x, y: x + y\n>>> add(5, 3)\n8\n"})}),"\n",(0,a.jsx)(n.p,{children:"You could declare the same add function with the def keyword, but it would be slightly more verbose:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def add(x, y):\n\treturn x + y\n>>> add(5, 3)\n8\n"})}),"\n",(0,a.jsx)(n.h2,{id:"data-structures",children:"Data Structures"}),"\n",(0,a.jsx)(n.h3,{id:"lists",children:"Lists"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# These are all inplace operations returns a None value\n\n<list>.append(<ele>)            # Add an element to the end of the list\n<list>.sort()                   # Sorts the given list\n<list>.pop([<ele>])             # Removes the last element if no argument else removes the element at the index given\n<list>.clear()                  # Makes it an empty list\n<list>.insert(<index>, <ele>)   # Adds the element before the index\n<list>.extend(<iterator>)\n<list>.reverse()                # Reverse a given list\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# These are not inplace operations and has a return value\n\n<list>.copy()                   # Makes a shallow copy of the list\n<list>.index(<ele>)             # Returns the index of the given element\n<list>.count(<ele>)             # Returns the number of occurrences of the element\n"})}),"\n",(0,a.jsx)(n.h3,{id:"dictionaries",children:"Dictionaries"}),"\n",(0,a.jsx)(n.p,{children:"key-value pairs."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"<dict> = {'Google':100, 'Facebook':80, 'Apple':90}\n\n<dict>['Amazon'] = 85                           # Adding a key along with the value\n\n# Accessing the dictionary\nfor key in <dict>:\n  print(\"{key} -> {x}\".format(key=key, x=<dict>[key]))\n\n<dict>.keys()                                   # Print all the keys\n<dict>.values()                                 # Print all the values\nlen(<dict>)                                     # Find the length of the dictionary\n<dict>.pop(<key>)                               # Removes the item with the specified key name\n<dict>.copy()                                   # Make a copy of a dictionary\n"})}),"\n",(0,a.jsx)(n.p,{children:"A dictionary can also contain many dictionaries, this is called nested dictionaries."}),"\n",(0,a.jsx)(n.h3,{id:"tuple",children:"Tuple"}),"\n",(0,a.jsx)(n.p,{children:"A tuple is a collection which is ordered, indexed and unchangeable. In Python tuples are written with round brackets."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"this_tuple = ('books', 'pen', 'paper')          # Defined a tuple\n\n# Accessing Tuple Items\nprint(this_tuple[2])                            # paper\n"})}),"\n",(0,a.jsx)(n.h4,{id:"changing-tuple-values",children:"Changing Tuple Values"}),"\n",(0,a.jsxs)(n.p,{children:["Tuples are immutable, which means they cant to changed once they are created.",(0,a.jsx)(n.br,{}),"\n","If a value inside tuple needs to be changed, the tuple must be converted to a list.",(0,a.jsx)(n.br,{}),"\n","Newly created list can be converted back to tuple after updating changes."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'desk_tuple = ("pen stand", "plant", "marker")\ndesk_list = list(desk_tuple)\ndesk_list[2] = "highlighter"\ndesk_tuple = tuple(desk_list)\n\nprint(desk_tuple[2])                            # highlighter\n'})}),"\n",(0,a.jsx)(n.h4,{id:"creating-tuple-with-one-item",children:"Creating tuple with one item"}),"\n",(0,a.jsx)(n.p,{children:"To create a tuple with only one item, you have to add a comma after the item, otherwise Python will not recognize it as a tuple."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'this_tuple = ("Python",)\nprint(type(this_tuple))                         # tuple\n\n# NOT a tuple\nthis_tuple = ("Python")\nprint(type(this_tuple))                         # str\n'})}),"\n",(0,a.jsx)(n.h4,{id:"deleting-a-tuple",children:"Deleting a tuple"}),"\n",(0,a.jsx)(n.p,{children:"Tuples are unchangeable, so you cannot remove items from it, but you can delete the tuple completely:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"this_tuple = ('books', 'pen', 'paper')\ndel this_tuple\nprint(this_tuple)                               # ERROR: this_tuple is not defined\n## Third party libraries\n"})}),"\n",(0,a.jsx)(n.h2,{id:"pandas",children:"Pandas"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"$ sudo pip3 install pandas          # Installing pandas module in Ubuntu\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import pandas as pd\n\n<dataframe>.head([<n>])             # Display the first n rows of the Dataframe, default value is 5 rows\n<dataframe>.tail([<n>])             # Display the last n rows of the Dataframe, default value is 5 rows\n<dataframe>.info()                  # Gives some information like, row and column datatypes, non-null count, and memory usage\n<dataframe>.describe()              # Provides some descriptive statistics about the numerical rows in the dataframe\n"})}),"\n",(0,a.jsx)(n.h3,{id:"data-structures-in-pandas",children:"Data Structures in Pandas"}),"\n",(0,a.jsx)(n.p,{children:"In Pandas, total of three data structures are used"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Series"}),"\n",(0,a.jsx)(n.li,{children:"DataFrame"}),"\n",(0,a.jsx)(n.li,{children:"Panel"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'#Series\nsr = pd.Series([100, 200, 300, 400],\nindex=["red", "green", "yello", "black"])\nprint(sr)\nprint(sr.values)\nprint(sr.index)\n\n#A series class has a structure that allows you to give values in one-dimensional arrays an index that corresponds to each value.\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"#DataFrame\nvalues = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nindex = ['one', 'two', 'three']\ncolumns = ['A', 'B', 'C']\n\ndf = pd.DataFrame(values, index=index, columns=columns)\nprint(df)\nprint(df.index)\nprint(df.columns)\nprint(df.values)\n#DataFrame passes a two-dimensional list as a parameter. Compared to a series, a data frame is added up to columns, consisting of columns, indexes, and values.\n"})}),"\n",(0,a.jsx)(n.h2,{id:"nltk",children:"NLTK"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"$ sudo pip3 install nltk                    # Installing nltk module in Ubuntu\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import nltk\n\n# Before trying any function download the word list\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\n"})}),"\n",(0,a.jsx)(n.h2,{id:"errors-and-exceptions",children:"Errors and Exceptions"}),"\n",(0,a.jsxs)(n.p,{children:["Program stops working on error Python raises exceptions when it encounter error.",(0,a.jsx)(n.br,{}),"\n","To avoid this, ",(0,a.jsx)(n.code,{children:"try-catch"})," blocks are used."]}),"\n",(0,a.jsx)(n.h3,{id:"exceptions",children:"Exceptions"}),"\n",(0,a.jsxs)(n.p,{children:["No syntax errors found, program starts execution.",(0,a.jsx)(n.br,{}),"\n","Errors detected during execution are called exceptions.",(0,a.jsx)(n.br,{}),"\n","Use try: except: finally: to catch and handle the exceptions.",(0,a.jsx)(n.br,{}),"\n","Use try: except: finally: to avoid program termination on exceptions.",(0,a.jsx)(n.br,{}),"\n","Use try: except: else: instead of try: except: finally: for alternate flows.",(0,a.jsx)(n.br,{}),"\n","Multiple except can be use to catch the exceptions."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'a = 10 * (1/0)\n\n# Throws division by zero exception and terminate the program\n# Traceback (most recent call last):\n  File "", line 1, in\n    a = 10 * (1/0)\n# ZeroDivisionError: division by zero\n\n# Updated Program - Valid - Try: Except: Finally\nb = 10\ntry:\n    a = 10 * (1/b)\n    print( "a = {}" .format( a ) )\nexcept:\n    print( "Caught divide by zero - while getting a" )\n    print( "Execute on error - b must be non-zero value" )\nfinally:\n    print( "Execute Always - normal and exceptional flow" )\n\n# OUTPUT\na = 1.0\nExecute Always - normal and exceptional flow\n\n## Updated Program - Error - Try: Except: Finally\nb = 0\ntry:\n    a = 10 * (1/b)\n    print( "a = {}" .format( a ) )\nexcept:\n    print( "Caught divide by zero - while getting a" )\n    print( "Execute on error - b must be non-zero value" )\nelse:\n    print( "Alternate to exceptional flow" )\n\n# Output\nCaught divide by zero - while getting a\nExecute on error - b must be non-zero value\nExecute Always - normal and exceptional flow\n'})}),"\n",(0,a.jsx)(n.h2,{id:"python-snippets",children:"Python Snippets"}),"\n",(0,a.jsx)(n.h3,{id:"anagrams",children:"Anagrams"}),"\n",(0,a.jsx)(n.p,{children:"An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from collections import Counter\ndef anagram(first, second):\n    return Counter(first) == Counter(second)\nanagram("abcd3", "3acdb") # True\n'})}),"\n",(0,a.jsx)(n.h3,{id:"memory",children:"Memory"}),"\n",(0,a.jsx)(n.p,{children:"This snippet can be used to check the memory usage of an object."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import sys\n\nvariable = 30\nprint(sys.getsizeof(variable)) # 24\n"})}),"\n",(0,a.jsx)(n.h3,{id:"print-a-string-n-times",children:"Print a string N times"}),"\n",(0,a.jsx)(n.p,{children:"This snippet can be used to print a string n times without having to use loops to do it."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'n = 2\ns ="Programming"\nprint(s * n) # ProgrammingProgramming\n'})}),"\n",(0,a.jsx)(n.h3,{id:"chunk",children:"Chunk"}),"\n",(0,a.jsx)(n.p,{children:"This method chunks a list into smaller lists of a specified size."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def chunk(list, size):\n    return [list[i:i+size] for i in range(0,len(list), size)]\n"})}),"\n",(0,a.jsx)(n.h3,{id:"get-vowels",children:"Get vowels"}),"\n",(0,a.jsx)(n.p,{children:"This method gets vowels (\u2018a\u2019, \u2018e\u2019, \u2018i\u2019, \u2018o\u2019, \u2018u\u2019) found in a string."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def get_vowels(string):\n    return [each for each in string if each in 'aeiou']\nget_vowels('foobar') # ['o', 'o', 'a']\nget_vowels('gym') # []\n"})}),"\n",(0,a.jsx)(n.h3,{id:"length-of-last-word-in-a-string",children:"Length of Last Word in a string"}),"\n",(0,a.jsx)(n.p,{children:"This method gets the length of last word in a given string."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def lengthOfLastWord(self, s: str) -> int:\n        if(s.split()):\n            lst=s.split()\n            last=lst[-1]\n            return len(last)\n        return 0\n"})}),"\n",(0,a.jsx)(n.h3,{id:"valid-palindrome",children:"Valid Palindrome"}),"\n",(0,a.jsx)(n.p,{children:"This method returns a bool value specifying whether a string is palindromic or not."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def isPalindrome(self, s: str) -> bool:\n        s = [ x.lower() for x in s if x.isalnum() ]\n        return s == s[::-1]\n"})}),"\n",(0,a.jsx)(n.h3,{id:"check-lowercase",children:"Check Lowercase"}),"\n",(0,a.jsx)(n.p,{children:"This method checks if a string is in lower case or not."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def toLowerCase(self, str):\n        """\n        :type str: str\n        :rtype: str\n        """\n        return str.lower()\n'})}),"\n",(0,a.jsx)(n.h3,{id:"count-negatives-in-a-sorted-matrix",children:"Count Negatives in a sorted Matrix"}),"\n",(0,a.jsx)(n.p,{children:"This method returns the count of negative numbers in a sorted matrix."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def countNegatives(self, grid: List[List[int]]) -> int:\n        count = 0\n        for num in grid:\n            for n in num:\n                if n < 0:\n                    count += 1\n        return count\n"})}),"\n",(0,a.jsx)(n.h3,{id:"write-to-file",children:"Write to file"}),"\n",(0,a.jsxs)(n.p,{children:["This method takes in the ",(0,a.jsx)(n.code,{children:"name of file"})," and ",(0,a.jsx)(n.code,{children:"content"})," then write the content into the file. If the file doesn't exist then it creates the file."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def write_to_file(filename, content):\n  try:\n    with open(filename, "w+") as f:\n      f.write(content)\n    print("Written to file successfully.")\n  except Exception as e:\n    print("Failed to write to file with error: ")\n    print(e)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"median-of-given-array",children:"Median of given array"}),"\n",(0,a.jsx)(n.p,{children:"This method returns the median of the given list/array as an output."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import statistics\ndef median(arr):\n    print(statistics.median(arr))\n"})}),"\n",(0,a.jsx)(n.h3,{id:"even-or-odd",children:"Even or Odd"}),"\n",(0,a.jsx)(n.p,{children:"This function determines the given number is even or odd."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def find_Evenodd(num):\n\n    if(num%2==0):\n        print(num," Is an even")\n    else:\n        print(num," is an odd")\n'})}),"\n",(0,a.jsx)(n.h3,{id:"palindrome",children:"Palindrome"}),"\n",(0,a.jsx)(n.p,{children:'This function returns "yes" if given string is a palindrome, else "no". Palindrome is a string whose reverse is the string itself.'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def isPalindrome(s):\n    if (s == s[::-1]):\n        return "yes"\n    else:\n        return "no"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"further-reading",children:"Further reading"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%201",children:"Introduction and Installation"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://dev.to/shivashishthak3/top-reasons-why-learning-python-is-the-best-decision-392k",children:"Why Python?"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%202",children:"Statements, Comments and Indentation"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%203",children:"Operators and If-elif-else"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%204",children:"The for loop"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%205",children:"Summary Interview questions"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%206",children:"The While Loop and more questions"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%207",children:"Exercises and coding challenges\u2694\ufe0f"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%208",children:"Unicode in Python"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%209",children:"Summary of the week and exercises."})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%2010",children:"Lists in Python"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%2011",children:"Multidimensional lists and Tuples"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%2012",children:"Basic algorithms"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%2013",children:"Stack implementation"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%2014",children:"Basic Exception and error handling using try-except"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%2015",children:"More about try-except"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/blob/main/Basic/Day%2016/README.md",children:"Fractal lists and other questions"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.geeksforgeeks.org/introduction-to-data-structures-10-most-commonly-used-data-structures/",children:"Intro to DSA"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/blob/main/Basic/Day%2017/README.md",children:"Insertion sort"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%2018",children:"Dictionaries in Python"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%2019",children:"Practicing Dictionary exercises"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%2020",children:"HashTables via Dictionaries"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%2021",children:"Summary of the week and dictionary exercises."})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%2022",children:"String Methods Part-1"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%2023",children:"String Methods Part-2"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%2024",children:"String Methods Part-3"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%2025",children:"Summary of the basic course."})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(6540);const a={},s=t.createContext(a);function r(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);